# This is the only configuration-File for the Python-Script "webradio.py". All Values entered here will be read only
# at each startup of the script and can not be changed and respected during runtime.
# Please note, that you need "sudo" in your start-command, when you want to use the GPIOs (In and Out)
# -> sudo python /home/pi/webradio/webradio.py
# Also please note the different Starting - Methodes:
#(1)    python ~/webradio/webradio.py                              >> Real GPIOs inactiv, WITH Simulator
#(2)    python ~/webradio/webradio.py  --disable-gpio              >> Real GPIOs inactiv, NO Simulator
#(3)    sudo python ~/webradio/webradio.py                         >> Real GPIOs activ, NO Simulator
#
# Also keep in Mind the different Startup-Arguments which you may add:
#'--no-network-check'   ='Ignore missing network connection')
#'--debug'              ='Show debug messages')
#'--disable-gpio'       ='Disables GPIOs (Only available on Raspberry Pi)')
#'--fullscreen'         ='Shows Window in Full-Screen Mode')
#'--touchscreen'        ='disables visible mouse-pointer')


[GENERAL]
# ============================================ User-specific Values =======================================
# "VARIABLE_DATABASE_NAME" : Give the NAME (not the path) of the symbolic link, which you may have placed into your
# Music-Folder. In your "variable Database" a exchangeable data-storage like an USB-Stick should get mounted.
# Note that this subfolder or symbolic link gets updated as soon as something is mounted in the mountpoint.
#VARIABLE_DATABASE_NAME=usb_device

# "VARIABLE_DATABASE_MOUNTPOINT" : Give the PATH (not the Name) of the Folder where exchangeable data-storages
# like an USB-Stick get mounted. Mounting is Managed from /etc/fstab.
#VARIABLE_DATABASE_MOUNTPOINT=/home/pi/usb_device

# sleepTimerDigitalSpinBox: The sleeptimer can look like a an old-school spinner or a digital spinbox.
# the old-school spinner is flickable but if you use an resistve Touchscreen or a mouse you may prefer the digiral ones.
# False = Spinner
# True = SpinBox
SleepTimerDigitalSpinBox=False

# ScreensaverDelay: a time in seconds after a screensaver is activated or Relais4 is triggered (remenber
# to activate the corresponding GPIO in the "GPIOS_OUT" section in this config file).
# e.g. 600 = 10 minutes
# ScreensaverDelay=600

# ============================================== Forced Values ========================================
# NOTE: This Value can be changed with the settings-tab in webradio.py! If you enter a value in this file, changes
# which are made from the UI will be ignored, only valid for one session, and will roll back during next start!
# FORCE Weather_LocationID : This is the Location-ID for your specific town. The weatherforecast will be shown for this
# In order do find the correct Location-ID, I suggest to visit "https://weather.com/de-DE" and search for your town
# in the upper right corner.
# With a search for "Hamburg" you will be forwarded to the Browser-Adress:
# https://weather.com/de-DE/wetter/heute/l/GMXX0049:1:GM  --> The needed Location ID is encrypted in there.
#                                     >>>>>GMXX0046<<<<<<<<
# Enter this id in above field
#Weather_LocationID=GMBY7640
#Weather_LocationName=Sattelpeilnstein

# NOTE: This Value can be changed with the settings-tab in webradio.py! If you enter a value in this file, changes
# which are made from the UI will be ignored, only valid for one session, and will roll back during next start!
# In the subfolder "res/designs" are different designs to choose. The design which is currently active can be changed
# in the Settings-Tab or FORCED in this conf-file, if the design which is selected from the conf-file is not existing, a
# predefinded fallback will be used.
#design=blue

# NOTE: This Value can be changed with the settings-tab in webradio.py! If you enter a value in this file, changes
# which are made from the UI will be ignored, only valid for one session, and will roll back during next start!
# If you do not want to use a relaise to turn of the backlight of your LCD, you can FORCE a screensaver during standby
# False = No Screensaver will be shown
# True = Screensaver will be shown during standby
#screensaver = False

# NOTE: This Value can be changed with the settings-tab in webradio.py! If you enter a value in this file, changes
# which are made from the UI will be ignored, only valid for one session, and will roll back during next start!
# FORCE Language to (note: the choosen language file have to exist in the "locale" folder:
#language = "en"

# NOTE: This Value is evaluated by webradio.py! If you enter a value in this file, this will force a specific
# windowsize, if nothing is specified, the maximum available size will be choosen.
# Note: Minimum is 640x480, all smaller values will be ignored.
#SCREEN_RESOLUTION=1024x680


[DEVELOPMENT]
# THESE SETTINGS ARE ONLY NECESSARY IF YOU WANT TO RUN THE PROGRAMM ON A DESKTOP-PC IN ADDITION! DONT TOUCH THIS :-)
MusicFolder=/home/matthias/Musik
VARIABLE_DATABASE=toplevel

[GPIOS_IN]
# IMPORTANT: Use Board-Numbering, not GPIO Numbering
# All Switches are LOW-Active, this means you have to connect the GPIO to a 3.3V Supply with current limitation in case
# If the Switch is clicked, a logical "0" has to be produced.

# Power_switch: Note: The Power-Switch has a double Function, first is "Longpress" which turns the radio OFF, second is
# short-click to "umount" a mounted USB-Stick...
# DO NOT USE OTHER PIN FOR ON/OFF BUTTON! Otherwise you will not be able to start the pi from halt (standby)
IN_Power_switch=5

# Preset switch : These switches are "progammable" Buttons were specific radio-channels can be "stored" on with a
# "long-press" for "store" and
# "short-click" for "play".
# NOTE: You can add more or less, just count the digit at the end of the descriptor (Next would be IN_Preset_switch5)
#IN_Preset_switch1=7
#IN_Preset_switch2=11
#IN_Preset_switch3=13
#IN_Preset_switch4=15

[GPIOS_OUT]
# IMPORTAND: Use Board-Numbering, not GPIO Numbering
# These are outputs! Expect 3.3V with a low current! So do not attatch big loads ...
# Normaly Use LEDs with a suitable current-limiting-resistor.

# OUT_Power_status Turns on as soon as the webradio is "playing" or active (even when in standby)
#OUT_Power_status=36

# OUT_USB_status Turns on as soon as something is mounted (USB-Stick), as long as it shows, you are not allowed to pull
# the USB-Stick out... first umount (using Power-Button)
#OUT_USB_status=32

# These Outputs can be also added or reduced. RELAIS1 and 2 will be called as "AMP on AMP off" ... RELAIS3 will be
# used as "LCD_Off", RELAIS4 is not in use at my side. NOTE: If you want to use this, Python-Coding is necessary.
#OUT_RELAIS1_status=31
#OUT_RELAIS2_status=33
#OUT_RELAIS3_status=35
#OUT_RELAIS4_status=37

[ROTARY_ENCODER]
#Pin_A=16
#Pin_B=18

[DHT11]
# IMPORTANT: give the GPIO not the Pin-No (Pin3 is GPIO2 for example)

# GPIO_TEMP: Where is the DHT11-Sensor connected with the I2C Line to the Pi ? Use GPIO! (Pin3, is GPIO2)
#GPIO_TEMP=2

# delay_tempmeasurement : How often (in Seconds) should the Temperature-Label updated ? in Seconds! 3 minutes == 180sec.
#delay_tempmeasurement = 180


